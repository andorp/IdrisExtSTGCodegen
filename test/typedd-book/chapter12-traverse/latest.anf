{__mainExpression:0} = []: %let v0 = (Main.main()) in (PrimIO.unsafePerformIO(v0))
{csegen:6} = []: %let v0 = (<{{csegen:6}:0} underapp 5>()) in (%let v1 = (<{{csegen:6}:1} underapp 3>()) in (%let v2 = (<{{csegen:6}:2} underapp 5>()) in (%con Prelude.Interfaces.MkApplicative(v0, v1, v2))))
{{csegen:6}:2} = [4, 3, 2, 1, 0]: %let v5 = (v2 @ (v0)) in (%let v6 = (v1 @ (v0)) in (v5 @ (v6)))
{{csegen:6}:1} = [2, 1, 0]: v1
{{csegen:6}:0} = [4, 3, 2, 1, 0]: Prelude.IO.map(v2, v1, v0)
{csegen:9} = []: <{{csegen:9}:0} underapp 5>()
{{csegen:9}:0} = [4, 3, 2, 1, 0]: %let v5 = (v2 @ (v0)) in (%let v6 = (v1 @ (v5)) in (v6 @ (v0)))
{csegen:12} = []: %let v0 = ({csegen:6}()) in (%let v1 = ({csegen:9}()) in (%let v2 = (<{{csegen:12}:0} underapp 3>()) in (%con Prelude.Interfaces.MkMonad(v0, v1, v2))))
{{csegen:12}:0} = [2, 1, 0]: %let v3 = (v1 @ (v0)) in (v3 @ (v0))
{csegen:16} = []: %let v3 = (%let v0 = ({csegen:6}()) in (%let v1 = ({csegen:9}()) in (%let v2 = (<{{csegen:16}:0} underapp 3>()) in (%con Prelude.Interfaces.MkMonad(v0, v1, v2))))) in (%let v4 = (<{{csegen:16}:1} underapp 2>()) in (%con Prelude.IO.MkHasIO(v3, v4)))
{{csegen:16}:1} = [1, 0]: v0
{{csegen:16}:0} = [2, 1, 0]: %let v3 = (v1 @ (v0)) in (v3 @ (v0))
prim__add_Integer = [0, 1]: %op +Integer(v0, v1)
prim__sub_Integer = [0, 1]: %op -Integer(v0, v1)
prim__mul_Integer = [0, 1]: %op *Integer(v0, v1)
Main.main = []: %let v2 = ({csegen:12}()) in (%let v3 = (%let v0 = ({csegen:16}()) in (%let v1 = ("Display Crew? ") in (Prelude.IO.putStr(v0, v1)))) in (%let v4 = (<Main.{main:9} underapp 2>()) in (Prelude.Interfaces.>>(v2, v3, v4))))
Main.{main:9} = [1, 0]: %let v2 = (%let v4 = (%let v3 = ({csegen:16}()) in (Prelude.IO.getLine(v3))) in (v4 @ (v0))) in (%let v12 = (%let v9 = ({csegen:12}()) in (%let v10 = (%let v6 = ({csegen:6}()) in (%let v7 = (%let v5 = ("yes") in (Prelude.EqOrd.==(v2, v5))) in (%let v8 = (<Main.{main:7} underapp 1>()) in (Prelude.Interfaces.when(v6, v7, v8))))) in (%let v11 = (<Main.{main:8} underapp 1>()) in (Prelude.Interfaces.>>(v9, v10, v11))))) in (v12 @ (v0)))
Main.{main:8} = [0]: %let v1 = ({csegen:16}()) in (%let v2 = ("Done") in (Prelude.IO.putStrLn(v1, v2)))
Main.{main:7} = [0]: %let v7 = ({csegen:6}()) in (%let v8 = (%let v1 = (<Main.{main:0} underapp 5>()) in (%let v2 = (<Main.{main:1} underapp 5>()) in (%let v3 = (<Main.{main:2} underapp 2>()) in (%let v4 = (<Main.{main:3} underapp 7>()) in (%let v5 = (<Main.{main:4} underapp 2>()) in (%let v6 = (<Main.{main:5} underapp 5>()) in (%con Prelude.Interfaces.MkFoldable(v1, v2, v3, v4, v5, v6)))))))) in (%let v9 = (<Main.{main:6} underapp 1>()) in (%let v10 = (Main.crew()) in (Prelude.Interfaces.traverse_(v7, v8, v9, v10)))))
Main.{main:6} = [0]: %let v1 = ({csegen:16}()) in (Prelude.IO.putStrLn(v1, v0))
Main.{main:5} = [4, 3, 2, 1, 0]: Prelude.Types.foldMap(v2, v1, v0)
Main.{main:4} = [1, 0]: v0
Main.{main:3} = [6, 5, 4, 3, 2, 1, 0]: Prelude.Types.foldlM(v3, v2, v1, v0)
Main.{main:2} = [1, 0]: Prelude.Types.null(v0)
Main.{main:1} = [4, 3, 2, 1, 0]: Prelude.Types.foldl(v2, v1, v0)
Main.{main:0} = [4, 3, 2, 1, 0]: Prelude.Types.foldr(v2, v1, v0)
Main.crew = []: %let v6 = ("Lister") in (%let v7 = (%let v4 = ("Rimmer") in (%let v5 = (%let v2 = ("Kryten") in (%let v3 = (%let v0 = ("Cat") in (%let v1 = (%con Prelude.Basics.Nil()) in (%con Prelude.Basics.::(v0, v1)))) in (%con Prelude.Basics.::(v2, v3)))) in (%con Prelude.Basics.::(v4, v5)))) in (%con Prelude.Basics.::(v6, v7)))
Prelude.Basics.flip = [0, 1, 2]: %let v3 = (v0 @ (v2)) in (v3 @ (v1))
Prelude.Basics.Nil = Constructor tag Just 0 arity 0 newtype by Nothing
Prelude.Basics.:: = Constructor tag Just 1 arity 2 newtype by Nothing
Builtin.believe_me = [0]: %op believe_me([__], [__], v0)
Builtin.MkUnit = Constructor tag Just 0 arity 0 newtype by Nothing
Prelude.Types.null = [0]: %case v0 of { %conalt Prelude.Basics.Nil() => 1| %conalt Prelude.Basics.::(v1, v2) => 0 Nothing }
Prelude.Types.foldr = [0, 1, 2]: %case v2 of { %conalt Prelude.Basics.Nil() => v1| %conalt Prelude.Basics.::(v3, v4) => %let v5 = (v0 @ (v3)) in (%let v6 = (Prelude.Types.foldr(v0, v1, v4)) in (v5 @ (v6))) Nothing }
Prelude.Types.foldl = [0, 1, 2]: %case v2 of { %conalt Prelude.Basics.Nil() => v1| %conalt Prelude.Basics.::(v3, v4) => %let v6 = (%let v5 = (v0 @ (v1)) in (v5 @ (v3))) in (Prelude.Types.foldl(v0, v6, v4)) Nothing }
Prelude.Types.foldlM = [0, 1, 2, 3]: %let v11 = (<Prelude.Types.{foldlM_Foldable_List:1} underapp 2>(v0, v1)) in (%let v12 = (%case v0 of { %conalt Prelude.Interfaces.MkMonad(v4, v5, v6) => %case v4 of { %conalt Prelude.Interfaces.MkApplicative(v7, v8, v9) => %let v10 = (v8 @ ([__])) in (v10 @ (v2)) Nothing } Nothing }) in (Prelude.Types.foldl(v11, v12, v3)))
Prelude.Types.{foldlM_Foldable_List:1} = [0, 1, 3, 2]: %case v0 of { %conalt Prelude.Interfaces.MkMonad(v4, v5, v6) => %let v9 = (%let v8 = (%let v7 = (v5 @ ([__])) in (v7 @ ([__]))) in (v8 @ (v3))) in (%let v10 = (<Prelude.Types.{foldlM_Foldable_List:0} underapp 1>(v2, v1)) in (v9 @ (v10))) Nothing }
Prelude.Types.{foldlM_Foldable_List:0} = [0, 1, 2]: Prelude.Basics.flip(v1, v0, v2)
Prelude.Types.foldMap = [0, 1, 2]: %let v5 = (<Prelude.Types.{foldMap_Foldable_List:0} underapp 2>(v0, v1)) in (%let v6 = (%case v0 of { %conalt Prelude.Interfaces.MkMonoid(v3, v4) => v4 Nothing }) in (Prelude.Types.foldl(v5, v6, v2)))
Prelude.Types.{foldMap_Foldable_List:0} = [0, 1, 3, 2]: %case v0 of { %conalt Prelude.Interfaces.MkMonoid(v4, v5) => %let v6 = (v4 @ (v3)) in (%let v7 = (v1 @ (v2)) in (v6 @ (v7))) Nothing }
Prelude.Types.prim__integerToNat = [0]: %let v3 = (%let v2 = (%let v1 = (0) in (%op <=Integer(v1, v0))) in (%case v2 of { %constalt(0) => 0 Just 1 })) in (%case v3 of { %constalt(1) => Builtin.believe_me(v0)| %constalt(0) => 0 Nothing })
Prelude.EqOrd.== = [0, 1]: %let v2 = (%op ==String(v0, v1)) in (%case v2 of { %constalt(0) => 0 Just 1 })
Prelude.Interfaces.when = [0, 1, 2]: %case v1 of { %constalt(1) => v2 @ ([__])| %constalt(0) => %case v0 of { %conalt Prelude.Interfaces.MkApplicative(v3, v4, v5) => %let v6 = (v4 @ ([__])) in (%let v7 = (%con Builtin.MkUnit()) in (v6 @ (v7))) Nothing } Nothing }
Prelude.Interfaces.traverse_ = [0, 1, 2, 3]: %case v1 of { %conalt Prelude.Interfaces.MkFoldable(v4, v5, v6, v7, v8, v9) => %let v20 = (%let v18 = (%let v11 = (%let v10 = (v4 @ ([__])) in (v10 @ ([__]))) in (%let v12 = (<Prelude.Interfaces.{traverse_:0} underapp 2>(v0, v2)) in (v11 @ (v12)))) in (%let v19 = (%case v0 of { %conalt Prelude.Interfaces.MkApplicative(v13, v14, v15) => %let v16 = (v14 @ ([__])) in (%let v17 = (%con Builtin.MkUnit()) in (v16 @ (v17))) Nothing }) in (v18 @ (v19)))) in (v20 @ (v3)) Nothing }
Prelude.Interfaces.{traverse_:0} = [0, 1, 3, 2]: %let v4 = (v1 @ (v3)) in (Prelude.Interfaces.*>(v0, v4, v2))
Prelude.Interfaces.MkMonad = Constructor tag Just 0 arity 3 newtype by Nothing
Prelude.Interfaces.MkFoldable = Constructor tag Just 0 arity 6 newtype by Nothing
Prelude.Interfaces.MkApplicative = Constructor tag Just 0 arity 3 newtype by Nothing
Prelude.Interfaces.>> = [0, 1, 2]: %case v0 of { %conalt Prelude.Interfaces.MkMonad(v3, v4, v5) => %let v8 = (%let v7 = (%let v6 = (v4 @ ([__])) in (v6 @ ([__]))) in (v7 @ (v1))) in (%let v9 = (<Prelude.Interfaces.{>>:0} underapp 1>(v2)) in (v8 @ (v9))) Nothing }
Prelude.Interfaces.{>>:0} = [0, 1]: v0 @ ([__])
Prelude.Interfaces.*> = [0, 1, 2]: %case v0 of { %conalt Prelude.Interfaces.MkApplicative(v3, v4, v5) => %let v16 = (%let v14 = (%let v6 = (v5 @ ([__])) in (v6 @ ([__]))) in (%let v15 = (%case v0 of { %conalt Prelude.Interfaces.MkApplicative(v7, v8, v9) => %let v13 = (%let v11 = (%let v10 = (v7 @ ([__])) in (v10 @ ([__]))) in (%let v12 = (<Prelude.Interfaces.{*>:0} underapp 2>()) in (v11 @ (v12)))) in (v13 @ (v1)) Nothing }) in (v14 @ (v15)))) in (v16 @ (v2)) Nothing }
Prelude.Interfaces.{*>:0} = [1, 0]: v0
Prelude.IO.map = [0, 1, 2]: %let v3 = (v1 @ (v2)) in (v0 @ (v3))
Prelude.IO.putStrLn = [0, 1]: %let v3 = (%let v2 = ("\n") in (%op ++(v1, v2))) in (Prelude.IO.putStr(v0, v3))
Prelude.IO.putStr = [0, 1]: %case v0 of { %conalt Prelude.IO.MkHasIO(v2, v3) => %let v4 = (v3 @ ([__])) in (%let v5 = (<Prelude.IO.{putStr:0} underapp 1>(v1)) in (v4 @ (v5))) Nothing }
Prelude.IO.{putStr:0} = [0, 1]: Prelude.IO.prim__putStr(v0, v1)
Prelude.IO.prim__putStr = Foreign call ["C:idris2_putStr, libidris2_support, idris_support.h", "node:lambda:x=>process.stdout.write(x)", "browser:lambda:x=>console.log(x)"] [String, %World] -> IORes Unit
Prelude.IO.prim__getStr = Foreign call ["C:idris2_getStr, libidris2_support, idris_support.h", "node:support:getStr,support_system_file"] [%World] -> IORes String
Prelude.IO.getLine = [0]: %case v0 of { %conalt Prelude.IO.MkHasIO(v1, v2) => %let v3 = (v2 @ ([__])) in (%let v4 = (<Prelude.IO.{getLine:0} underapp 1>()) in (v3 @ (v4))) Nothing }
Prelude.IO.{getLine:0} = [0]: Prelude.IO.prim__getStr(v0)
Prelude.IO.MkHasIO = Constructor tag Just 0 arity 2 newtype by Nothing
PrimIO.unsafePerformIO = [0]: %let v1 = (<PrimIO.{unsafePerformIO:0} underapp 1>(v0)) in (PrimIO.unsafeCreateWorld(v1))
PrimIO.{unsafePerformIO:0} = [0, 1]: v0 @ (v1)
PrimIO.unsafeCreateWorld = [0]: %let v1 = (%MkWorld) in (v0 @ (v1))
