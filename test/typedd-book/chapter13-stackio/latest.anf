{__mainExpression:0} = []: %let v0 = (<{{__mainExpression:0}:0} underapp 1>()) in (PrimIO.unsafePerformIO(v0))
{{__mainExpression:0}:0} = [0]: Main.main(v0)
{csegen:21} = []: %let v0 = (<{{csegen:21}:0} underapp 5>()) in (%let v1 = (<{{csegen:21}:1} underapp 3>()) in (%let v2 = (<{{csegen:21}:2} underapp 5>()) in (%con Prelude.Interfaces.MkApplicative(v0, v1, v2))))
{{csegen:21}:2} = [4, 3, 2, 1, 0]: %let v5 = (v2 @ (v0)) in (%let v6 = (v1 @ (v0)) in (v5 @ (v6)))
{{csegen:21}:1} = [2, 1, 0]: v1
{{csegen:21}:0} = [4, 3, 2, 1, 0]: Prelude.IO.map(v2, v1, v0)
{csegen:24} = []: <{{csegen:24}:0} underapp 5>()
{{csegen:24}:0} = [4, 3, 2, 1, 0]: %let v5 = (v2 @ (v0)) in (%let v6 = (v1 @ (v5)) in (v6 @ (v0)))
{csegen:28} = []: %let v3 = (%let v0 = ({csegen:21}()) in (%let v1 = ({csegen:24}()) in (%let v2 = (<{{csegen:28}:0} underapp 3>()) in (%con Prelude.Interfaces.MkMonad(v0, v1, v2))))) in (%let v4 = (<{{csegen:28}:1} underapp 2>()) in (%con Prelude.IO.MkHasIO(v3, v4)))
{{csegen:28}:1} = [1, 0]: v0
{{csegen:28}:0} = [2, 1, 0]: %let v3 = (v1 @ (v0)) in (v3 @ (v0))
{csegen:29} = []: %let v0 = ({csegen:28}()) in (Prelude.IO.getLine(v0))
{csegen:32} = []: %let v0 = ({csegen:21}()) in (%let v1 = ({csegen:24}()) in (%let v2 = (<{{csegen:32}:0} underapp 3>()) in (%con Prelude.Interfaces.MkMonad(v0, v1, v2))))
{{csegen:32}:0} = [2, 1, 0]: %let v3 = (v1 @ (v0)) in (v3 @ (v0))
prim__add_Integer = [0, 1]: %op +Integer(v0, v1)
prim__sub_Integer = [0, 1]: %op -Integer(v0, v1)
prim__mul_Integer = [0, 1]: %op *Integer(v0, v1)
Main.tryAdd = [0]: %case v0 of { %constalt(0) => %let v2 = (%let v1 = ("Fewer than two items on the stack\n") in (%con Main.PutStr(v1))) in (%let v3 = (<Main.{tryAdd:0} underapp 1>(v0)) in (Main.StackDo.>>(v2, v3))) Just %let v4 = (%let v5 = (1) in (%op -Integer(v0, v5))) in (%case v4 of { %constalt(0) => %let v7 = (%let v6 = ("Fewer than two items on the stack\n") in (%con Main.PutStr(v6))) in (%let v8 = (<Main.{tryAdd:1} underapp 1>(v0)) in (Main.StackDo.>>(v7, v8))) Just %let v9 = (%let v10 = (1) in (%op -Integer(v4, v10))) in (%let v11 = (Main.doAdd()) in (%let v12 = (<Main.{tryAdd:5} underapp 1>(v9)) in (Main.StackDo.>>(v11, v12)))) }) }
Main.{tryAdd:5} = [0, 1]: %let v2 = (%con Main.Top()) in (%let v3 = (<Main.{tryAdd:4} underapp 1>(v0)) in (Main.StackDo.>>=(v2, v3)))
Main.{tryAdd:4} = [0, 1]: <Main.{tryAdd:3} underapp 1>(v1, v0)
Main.{tryAdd:3} = [0, 1, 2]: %let v6 = (%let v5 = (%let v3 = (Prelude.Show.show(v0)) in (%let v4 = ("\n") in (%op ++(v3, v4)))) in (%con Main.PutStr(v5))) in (%let v7 = (<Main.{tryAdd:2} underapp 1>(v1)) in (Main.StackDo.>>(v6, v7)))
Main.{tryAdd:2} = [0, 1]: %let v3 = (%let v2 = (1) in (%op +Integer(v0, v2))) in (Main.stackCalc(v3))
Main.{tryAdd:1} = [0, 1]: Main.stackCalc(v0)
Main.{tryAdd:0} = [0, 1]: Main.stackCalc(v0)
Main.strToInput = [0]: %case v0 of { %constalt("") => %con Prelude.Types.Nothing()| %constalt("add") => %let v1 = (%con Main.Add()) in (%con Prelude.Types.Just(v1))| %constalt("quit") => %let v2 = (%con Main.Quit()) in (%con Prelude.Types.Just(v2)) Just %let v14 = (%let v9 = (%let v3 = (<Main.{strToInput:0} underapp 5>()) in (%let v4 = (<Main.{strToInput:1} underapp 5>()) in (%let v5 = (<Main.{strToInput:2} underapp 2>()) in (%let v6 = (<Main.{strToInput:3} underapp 7>()) in (%let v7 = (<Main.{strToInput:4} underapp 2>()) in (%let v8 = (<Main.{strToInput:5} underapp 5>()) in (%con Prelude.Interfaces.MkFoldable(v3, v4, v5, v6, v7, v8)))))))) in (%let v10 = (<Main.{strToInput:6} underapp 1>()) in (%let v11 = (Prelude.Types.fastUnpack(v0)) in (Prelude.Interfaces.all(v9, v10, v11))))) in (%case v14 of { %constalt(1) => %let v13 = (%let v12 = (Prelude.Cast.cast(v0)) in (%con Main.Number(v12))) in (%con Prelude.Types.Just(v13))| %constalt(0) => %con Prelude.Types.Nothing() Nothing }) }
Main.{strToInput:6} = [0]: Prelude.Types.isDigit(v0)
Main.{strToInput:5} = [4, 3, 2, 1, 0]: Prelude.Types.foldMap(v2, v1, v0)
Main.{strToInput:4} = [1, 0]: v0
Main.{strToInput:3} = [6, 5, 4, 3, 2, 1, 0]: Prelude.Types.foldlM(v3, v2, v1, v0)
Main.{strToInput:2} = [1, 0]: Prelude.Types.null(v0)
Main.{strToInput:1} = [4, 3, 2, 1, 0]: Prelude.Types.foldl(v2, v1, v0)
Main.{strToInput:0} = [4, 3, 2, 1, 0]: Prelude.Types.foldr(v2, v1, v0)
Main.stackCalc = [0]: %let v2 = (%let v1 = ("> ") in (%con Main.PutStr(v1))) in (%let v3 = (<Main.{stackCalc:7} underapp 1>(v0)) in (Main.StackDo.>>(v2, v3)))
Main.{stackCalc:7} = [0, 1]: %let v2 = (%con Main.GetStr()) in (%let v3 = (<Main.{stackCalc:6} underapp 1>(v0)) in (Main.StackDo.>>=(v2, v3)))
Main.{stackCalc:6} = [0, 1]: %let v4 = (Main.strToInput(v1)) in (%case v4 of { %conalt Prelude.Types.Nothing() => <Main.{stackCalc:1} underapp 1>(v0)| %conalt Prelude.Types.Just(v2) => %case v2 of { %conalt Main.Number(v3) => <Main.{stackCalc:3} underapp 1>(v3, v0)| %conalt Main.Add() => <Main.{stackCalc:4} underapp 1>(v0)| %conalt Main.Quit() => <Main.{stackCalc:5} underapp 1>(v0) Nothing } Nothing })
Main.{stackCalc:5} = [0, 1]: %con Main.Done(v0)
Main.{stackCalc:4} = [0, 1]: Main.tryAdd(v0)
Main.{stackCalc:3} = [0, 1, 2]: %let v3 = (%con Main.Push(v0)) in (%let v4 = (<Main.{stackCalc:2} underapp 1>(v1)) in (Main.StackDo.>>(v3, v4)))
Main.{stackCalc:2} = [0, 1]: %let v3 = (%let v2 = (1) in (%op +Integer(v0, v2))) in (Main.stackCalc(v3))
Main.{stackCalc:1} = [0, 1]: %let v3 = (%let v2 = ("Invalid input\n") in (%con Main.PutStr(v2))) in (%let v4 = (<Main.{stackCalc:0} underapp 1>(v0)) in (Main.StackDo.>>(v3, v4)))
Main.{stackCalc:0} = [0, 1]: Main.stackCalc(v0)
Main.runStack = [0, 1]: %case v1 of { %conalt Main.Push(v2) => <Main.{runStack:0} underapp 1>(v2, v0) Just %case v0 of { %conalt Data.Vect.::(v3, v4) => %case v1 of { %conalt Main.Pop() => <Main.{runStack:1} underapp 1>(v3, v4)| %conalt Main.Top() => <Main.{runStack:2} underapp 1>(v3, v4) Just %case v1 of { %conalt Main.GetStr() => <Main.{runStack:3} underapp 1>(v0)| %conalt Main.PutStr(v5) => %let v7 = ({csegen:32}()) in (%let v8 = (%let v6 = ({csegen:28}()) in (Prelude.IO.putStr(v6, v5))) in (%let v9 = (<Main.{runStack:4} underapp 2>(v0)) in (Prelude.Interfaces.>>(v7, v8, v9))))| %conalt Main.Pure(v10) => <Main.{runStack:5} underapp 1>(v10, v0)| %conalt Main.>>=(v11, v12) => <Main.{runStack:6} underapp 1>(v11, v12, v0) Nothing } } Just %case v1 of { %conalt Main.GetStr() => <Main.{runStack:7} underapp 1>(v0)| %conalt Main.PutStr(v13) => %let v15 = ({csegen:32}()) in (%let v16 = (%let v14 = ({csegen:28}()) in (Prelude.IO.putStr(v14, v13))) in (%let v17 = (<Main.{runStack:8} underapp 2>(v0)) in (Prelude.Interfaces.>>(v15, v16, v17))))| %conalt Main.Pure(v18) => <Main.{runStack:9} underapp 1>(v18, v0)| %conalt Main.>>=(v19, v20) => <Main.{runStack:10} underapp 1>(v19, v20, v0) Nothing } } }
Main.{runStack:10} = [0, 1, 2, 3]: %let v4 = (%let v5 = (Main.runStack(v2, v0)) in (v5 @ (v3))) in (%case v4 of { %conalt Builtin.MkPair(v6, v7) => %let v9 = (%let v8 = (v1 @ (v6)) in (Main.runStack(v7, v8))) in (v9 @ (v3)) Nothing })
Main.{runStack:9} = [0, 1, 2]: %con Builtin.MkPair(v0, v1)
Main.{runStack:8} = [0, 2, 1]: %let v3 = (%con Builtin.MkUnit()) in (%con Builtin.MkPair(v3, v0))
Main.{runStack:7} = [0, 1]: %let v2 = (%let v3 = ({csegen:29}()) in (v3 @ (v1))) in (%con Builtin.MkPair(v2, v0))
Main.{runStack:6} = [0, 1, 2, 3]: %let v4 = (%let v5 = (Main.runStack(v2, v0)) in (v5 @ (v3))) in (%case v4 of { %conalt Builtin.MkPair(v6, v7) => %let v9 = (%let v8 = (v1 @ (v6)) in (Main.runStack(v7, v8))) in (v9 @ (v3)) Nothing })
Main.{runStack:5} = [0, 1, 2]: %con Builtin.MkPair(v0, v1)
Main.{runStack:4} = [0, 2, 1]: %let v3 = (%con Builtin.MkUnit()) in (%con Builtin.MkPair(v3, v0))
Main.{runStack:3} = [0, 1]: %let v2 = (%let v3 = ({csegen:29}()) in (v3 @ (v1))) in (%con Builtin.MkPair(v2, v0))
Main.{runStack:2} = [0, 1, 2]: %let v3 = (%con Data.Vect.::(v0, v1)) in (%con Builtin.MkPair(v0, v3))
Main.{runStack:1} = [0, 1, 2]: %con Builtin.MkPair(v0, v1)
Main.{runStack:0} = [0, 1, 2]: %let v3 = (%con Builtin.MkUnit()) in (%let v4 = (%con Data.Vect.::(v0, v1)) in (%con Builtin.MkPair(v3, v4)))
Main.run = [0, 1, 2, 3]: %case v0 of { %conalt Main.Dry() => %con Builtin.MkUnit()| %conalt Main.More(v4) => %case v2 of { %conalt Main.Do(v5, v6) => %let v7 = (%let v8 = (Main.runStack(v1, v5)) in (v8 @ (v3))) in (%case v7 of { %conalt Builtin.MkPair(v9, v10) => %let v12 = (v4 @ ([__])) in (%let v13 = (%let v11 = (v6 @ (v9)) in (v11 @ ([__]))) in (Main.run(v12, v10, v13, v3))) Nothing })| %conalt Main.Seq(v14, v15) => %let v16 = (%let v17 = (Main.runStack(v1, v14)) in (v17 @ (v3))) in (%case v16 of { %conalt Builtin.MkPair(v18, v19) => %let v20 = (v4 @ ([__])) in (%let v21 = (v15 @ ([__])) in (Main.run(v20, v19, v21, v3))) Nothing })| %conalt Main.Done(v22) => %con Builtin.MkUnit() Nothing } Nothing }
Main.main = [0]: %let v2 = (Main.forever()) in (%let v3 = (%con Data.Vect.Nil()) in (%let v4 = (%let v1 = (0) in (Main.stackCalc(v1))) in (Main.run(v2, v3, v4, v0))))
Main.forever = []: %let v0 = (<Main.{forever:0} underapp 1>()) in (%con Main.More(v0))
Main.{forever:0} = [0]: Main.forever()
Main.doAdd = []: %let v0 = (%con Main.Pop()) in (%let v1 = (<Main.{doAdd:1} underapp 1>()) in (%con Main.>>=(v0, v1)))
Main.{doAdd:1} = [0]: %let v1 = (%con Main.Pop()) in (%let v2 = (<Main.{doAdd:0} underapp 1>(v0)) in (%con Main.>>=(v1, v2)))
Main.{doAdd:0} = [0, 1]: %let v2 = (%op +Integer(v0, v1)) in (%con Main.Push(v2))
Main.Top = Constructor tag Just 2 arity 0 newtype by Nothing
Main.Seq = Constructor tag Just 1 arity 2 newtype by Nothing
Main.Quit = Constructor tag Just 2 arity 0 newtype by Nothing
Main.PutStr = Constructor tag Just 4 arity 1 newtype by Nothing
Main.Push = Constructor tag Just 0 arity 1 newtype by Nothing
Main.Pop = Constructor tag Just 1 arity 0 newtype by Nothing
Main.Number = Constructor tag Just 0 arity 1 newtype by Nothing
Main.More = Constructor tag Just 1 arity 1 newtype by Nothing
Main.GetStr = Constructor tag Just 3 arity 0 newtype by Nothing
Main.Done = Constructor tag Just 2 arity 1 newtype by Nothing
Main.Do = Constructor tag Just 0 arity 2 newtype by Nothing
Main.Add = Constructor tag Just 1 arity 0 newtype by Nothing
Main.StackDo.>>= = [0, 1]: %con Main.Do(v0, v1)
Main.>>= = Constructor tag Just 6 arity 2 newtype by Nothing
Main.StackDo.>> = [0, 1]: %con Main.Seq(v0, v1)
Data.Vect.Nil = Constructor tag Just 0 arity 0 newtype by Nothing
Data.Vect.:: = Constructor tag Just 1 arity 2 newtype by Nothing
Prelude.Basics.flip = [0, 1, 2]: %let v3 = (v0 @ (v2)) in (v3 @ (v1))
Builtin.believe_me = [0]: %op believe_me([__], [__], v0)
Builtin.MkUnit = Constructor tag Just 0 arity 0 newtype by Nothing
Builtin.MkPair = Constructor tag Just 0 arity 2 newtype by Nothing
Prelude.Types.null = [0]: %case v0 of { %conalt Prelude.Basics.Nil() => 1| %conalt Prelude.Basics.::(v1, v2) => 0 Nothing }
Prelude.Types.foldr = [0, 1, 2]: %case v2 of { %conalt Prelude.Basics.Nil() => v1| %conalt Prelude.Basics.::(v3, v4) => %let v5 = (v0 @ (v3)) in (%let v6 = (Prelude.Types.foldr(v0, v1, v4)) in (v5 @ (v6))) Nothing }
Prelude.Types.foldl = [0, 1, 2]: %case v2 of { %conalt Prelude.Basics.Nil() => v1| %conalt Prelude.Basics.::(v3, v4) => %let v6 = (%let v5 = (v0 @ (v1)) in (v5 @ (v3))) in (Prelude.Types.foldl(v0, v6, v4)) Nothing }
Prelude.Types.foldlM = [0, 1, 2, 3]: %let v11 = (<Prelude.Types.{foldlM_Foldable_List:1} underapp 2>(v0, v1)) in (%let v12 = (%case v0 of { %conalt Prelude.Interfaces.MkMonad(v4, v5, v6) => %case v4 of { %conalt Prelude.Interfaces.MkApplicative(v7, v8, v9) => %let v10 = (v8 @ ([__])) in (v10 @ (v2)) Nothing } Nothing }) in (Prelude.Types.foldl(v11, v12, v3)))
Prelude.Types.{foldlM_Foldable_List:1} = [0, 1, 3, 2]: %case v0 of { %conalt Prelude.Interfaces.MkMonad(v4, v5, v6) => %let v9 = (%let v8 = (%let v7 = (v5 @ ([__])) in (v7 @ ([__]))) in (v8 @ (v3))) in (%let v10 = (<Prelude.Types.{foldlM_Foldable_List:0} underapp 1>(v2, v1)) in (v9 @ (v10))) Nothing }
Prelude.Types.{foldlM_Foldable_List:0} = [0, 1, 2]: Prelude.Basics.flip(v1, v0, v2)
Prelude.Types.foldMap = [0, 1, 2]: %let v5 = (<Prelude.Types.{foldMap_Foldable_List:0} underapp 2>(v0, v1)) in (%let v6 = (%case v0 of { %conalt Prelude.Interfaces.MkMonoid(v3, v4) => v4 Nothing }) in (Prelude.Types.foldl(v5, v6, v2)))
Prelude.Types.{foldMap_Foldable_List:0} = [0, 1, 3, 2]: %case v0 of { %conalt Prelude.Interfaces.MkMonoid(v4, v5) => %let v6 = (v4 @ (v3)) in (%let v7 = (v1 @ (v2)) in (v6 @ (v7))) Nothing }
Prelude.Types.prim__integerToNat = [0]: %let v3 = (%let v2 = (%let v1 = (0) in (%op <=Integer(v1, v0))) in (%case v2 of { %constalt(0) => 0 Just 1 })) in (%case v3 of { %constalt(1) => Builtin.believe_me(v0)| %constalt(0) => 0 Nothing })
Prelude.Types.isDigit = [0]: %let v3 = (%let v1 = ('0') in (Prelude.EqOrd.>=(v0, v1))) in (%case v3 of { %constalt(1) => %let v2 = ('9') in (Prelude.EqOrd.<=(v0, v2))| %constalt(0) => 0 Nothing })
Prelude.Types.fastUnpack = Foreign call ["scheme:string-unpack", "RefC:fastUnpack", "javascript:lambda:(str)=>__prim_js2idris_array(Array.from(str))"] [String] -> Prelude.Basics.List Char
Prelude.Types.Nothing = Constructor tag Just 0 arity 0 newtype by Nothing
Prelude.Types.Just = Constructor tag Just 1 arity 1 newtype by Nothing
Prelude.EqOrd.compare = [0, 1]: %let v3 = (Prelude.EqOrd.<(v0, v1)) in (%case v3 of { %constalt(1) => 0| %constalt(0) => %let v2 = (Prelude.EqOrd.==(v0, v1)) in (%case v2 of { %constalt(1) => 1| %constalt(0) => 2 Nothing }) Nothing })
Prelude.EqOrd.>= = [0, 1]: %let v2 = (%op >=Char(v0, v1)) in (%case v2 of { %constalt(0) => 0 Just 1 })
Prelude.EqOrd.== = [0, 1]: %case v0 of { %constalt(0) => %case v1 of { %constalt(0) => 1 Just 0 }| %constalt(1) => %case v1 of { %constalt(1) => 1 Just 0 }| %constalt(2) => %case v1 of { %constalt(2) => 1 Just 0 } Just 0 }
Prelude.EqOrd.== = [0, 1]: %let v2 = (%op ==Integer(v0, v1)) in (%case v2 of { %constalt(0) => 0 Just 1 })
Prelude.EqOrd.== = [0, 1]: %let v2 = (%op ==Char(v0, v1)) in (%case v2 of { %constalt(0) => 0 Just 1 })
Prelude.EqOrd.< = [0, 1]: %let v2 = (%op <Integer(v0, v1)) in (%case v2 of { %constalt(0) => 0 Just 1 })
Prelude.EqOrd.<= = [0, 1]: %let v2 = (%op <=Char(v0, v1)) in (%case v2 of { %constalt(0) => 0 Just 1 })
Prelude.EqOrd./= = [0, 1]: %let v2 = (Prelude.EqOrd.==(v0, v1)) in (%case v2 of { %constalt(1) => 0| %constalt(0) => 1 Nothing })
Prelude.Interfaces.Bool.Semigroup.<+> = [0, 1]: %case v0 of { %constalt(1) => v1| %constalt(0) => 0 Nothing }
Prelude.Interfaces.all = [0, 1, 2]: %case v0 of { %conalt Prelude.Interfaces.MkFoldable(v3, v4, v5, v6, v7, v8) => %let v15 = (%let v14 = (%let v12 = (%let v9 = (v8 @ ([__])) in (v9 @ ([__]))) in (%let v13 = (%let v10 = (<Prelude.Interfaces.{all:0} underapp 2>()) in (%let v11 = (1) in (%con Prelude.Interfaces.MkMonoid(v10, v11)))) in (v12 @ (v13)))) in (v14 @ (v1))) in (v15 @ (v2)) Nothing }
Prelude.Interfaces.{all:0} = [1, 0]: Prelude.Interfaces.Bool.Semigroup.<+>(v1, v0)
Prelude.Interfaces.MkMonoid = Constructor tag Just 0 arity 2 newtype by Nothing
Prelude.Interfaces.MkMonad = Constructor tag Just 0 arity 3 newtype by Nothing
Prelude.Interfaces.MkFoldable = Constructor tag Just 0 arity 6 newtype by Nothing
Prelude.Interfaces.MkApplicative = Constructor tag Just 0 arity 3 newtype by Nothing
Prelude.Interfaces.>> = [0, 1, 2]: %case v0 of { %conalt Prelude.Interfaces.MkMonad(v3, v4, v5) => %let v8 = (%let v7 = (%let v6 = (v4 @ ([__])) in (v6 @ ([__]))) in (v7 @ (v1))) in (%let v9 = (<Prelude.Interfaces.{>>:0} underapp 1>(v2)) in (v8 @ (v9))) Nothing }
Prelude.Interfaces.{>>:0} = [0, 1]: v0 @ ([__])
Prelude.Show.show = [0]: %let v1 = (%con Prelude.Show.Open()) in (Prelude.Show.showPrec(v1, v0))
Prelude.Show.showPrec = [0, 1]: %let v2 = (<Prelude.Show.{showPrec_Show_Integer:0} underapp 1>()) in (Prelude.Show.primNumShow(v2, v0, v1))
Prelude.Show.{showPrec_Show_Integer:0} = [0]: %op cast-Integer-String(v0)
Prelude.Show.compare = [0, 1]: %case v0 of { %conalt Prelude.Show.User(v2) => %case v1 of { %conalt Prelude.Show.User(v3) => Prelude.EqOrd.compare(v2, v3) Just %let v4 = (Prelude.Show.precCon(v0)) in (%let v5 = (Prelude.Show.precCon(v1)) in (Prelude.EqOrd.compare(v4, v5))) } Just %let v6 = (Prelude.Show.precCon(v0)) in (%let v7 = (Prelude.Show.precCon(v1)) in (Prelude.EqOrd.compare(v6, v7))) }
Prelude.Show.>= = [0, 1]: %let v2 = (Prelude.Show.compare(v0, v1)) in (%let v3 = (0) in (Prelude.EqOrd./=(v2, v3)))
Prelude.Show.showParens = [0, 1]: %case v0 of { %constalt(0) => v1| %constalt(1) => %let v3 = ("(") in (%let v4 = (%let v2 = (")") in (%op ++(v1, v2))) in (%op ++(v3, v4))) Nothing }
Prelude.Show.primNumShow = [0, 1, 2]: %let v3 = (v0 @ (v2)) in (%let v7 = (%let v6 = (%let v4 = (%con Prelude.Show.PrefixMinus()) in (Prelude.Show.>=(v1, v4))) in (%case v6 of { %constalt(1) => %let v5 = (<Prelude.Show.{primNumShow:0} underapp 1>()) in (Prelude.Show.firstCharIs(v5, v3))| %constalt(0) => 0 Nothing })) in (Prelude.Show.showParens(v7, v3)))
Prelude.Show.{primNumShow:0} = [0]: %let v1 = ('-') in (Prelude.EqOrd.==(v0, v1))
Prelude.Show.precCon = [0]: %case v0 of { %conalt Prelude.Show.Open() => 0| %conalt Prelude.Show.Equal() => 1| %conalt Prelude.Show.Dollar() => 2| %conalt Prelude.Show.Backtick() => 3| %conalt Prelude.Show.User(v1) => 4| %conalt Prelude.Show.PrefixMinus() => 5| %conalt Prelude.Show.App() => 6 Nothing }
Prelude.Show.firstCharIs = [0, 1]: %case v1 of { %constalt("") => 0 Just %let v2 = (%op op_strhead(v1)) in (v0 @ (v2)) }
Prelude.Show.PrefixMinus = Constructor tag Just 5 arity 0 newtype by Nothing
Prelude.Show.Open = Constructor tag Just 0 arity 0 newtype by Nothing
Prelude.IO.map = [0, 1, 2]: %let v3 = (v1 @ (v2)) in (v0 @ (v3))
Prelude.IO.putStr = [0, 1]: %case v0 of { %conalt Prelude.IO.MkHasIO(v2, v3) => %let v4 = (v3 @ ([__])) in (%let v5 = (<Prelude.IO.{putStr:0} underapp 1>(v1)) in (v4 @ (v5))) Nothing }
Prelude.IO.{putStr:0} = [0, 1]: Prelude.IO.prim__putStr(v0, v1)
Prelude.IO.prim__putStr = Foreign call ["C:idris2_putStr, libidris2_support, idris_support.h", "node:lambda:x=>process.stdout.write(x)", "browser:lambda:x=>console.log(x)"] [String, %World] -> IORes Unit
Prelude.IO.prim__getStr = Foreign call ["C:idris2_getStr, libidris2_support, idris_support.h", "node:support:getStr,support_system_file"] [%World] -> IORes String
Prelude.IO.getLine = [0]: %case v0 of { %conalt Prelude.IO.MkHasIO(v1, v2) => %let v3 = (v2 @ ([__])) in (%let v4 = (<Prelude.IO.{getLine:0} underapp 1>()) in (v3 @ (v4))) Nothing }
Prelude.IO.{getLine:0} = [0]: Prelude.IO.prim__getStr(v0)
Prelude.IO.MkHasIO = Constructor tag Just 0 arity 2 newtype by Nothing
PrimIO.unsafePerformIO = [0]: %let v1 = (<PrimIO.{unsafePerformIO:0} underapp 1>(v0)) in (PrimIO.unsafeCreateWorld(v1))
PrimIO.{unsafePerformIO:0} = [0, 1]: v0 @ (v1)
PrimIO.unsafeCreateWorld = [0]: %let v1 = (%MkWorld) in (v0 @ (v1))
Prelude.Cast.cast = [0]: %op cast-String-Integer(v0)
