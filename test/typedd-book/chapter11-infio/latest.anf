{__mainExpression:0} = []: %let v0 = (Main.main()) in (PrimIO.unsafePerformIO(v0))
{csegen:6} = []: %let v0 = (<{{csegen:6}:0} underapp 5>()) in (%let v1 = (<{{csegen:6}:1} underapp 3>()) in (%let v2 = (<{{csegen:6}:2} underapp 5>()) in (%con Prelude.Interfaces.MkApplicative(v0, v1, v2))))
{{csegen:6}:2} = [4, 3, 2, 1, 0]: %let v5 = (v2 @ (v0)) in (%let v6 = (v1 @ (v0)) in (v5 @ (v6)))
{{csegen:6}:1} = [2, 1, 0]: v1
{{csegen:6}:0} = [4, 3, 2, 1, 0]: Prelude.IO.map(v2, v1, v0)
{csegen:9} = []: <{{csegen:9}:0} underapp 5>()
{{csegen:9}:0} = [4, 3, 2, 1, 0]: %let v5 = (v2 @ (v0)) in (%let v6 = (v1 @ (v5)) in (v6 @ (v0)))
{csegen:16} = []: %let v3 = (%let v0 = ({csegen:6}()) in (%let v1 = ({csegen:9}()) in (%let v2 = (<{{csegen:16}:0} underapp 3>()) in (%con Prelude.Interfaces.MkMonad(v0, v1, v2))))) in (%let v4 = (<{{csegen:16}:1} underapp 2>()) in (%con Prelude.IO.MkHasIO(v3, v4)))
{{csegen:16}:1} = [1, 0]: v0
{{csegen:16}:0} = [2, 1, 0]: %let v3 = (v1 @ (v0)) in (v3 @ (v0))
prim__add_Integer = [0, 1]: %op +Integer(v0, v1)
prim__sub_Integer = [0, 1]: %op -Integer(v0, v1)
prim__mul_Integer = [0, 1]: %op *Integer(v0, v1)
Main.tank = [0]: %case v0 of { %constalt(0) => %con Main.Dry() Just %let v1 = (%let v2 = (1) in (%op -Integer(v0, v2))) in (%let v3 = (<Main.{tank:0} underapp 1>(v1)) in (%con Main.More(v3))) }
Main.{tank:0} = [0, 1]: Main.tank(v0)
Main.run = [0, 1]: %case v0 of { %conalt Main.More(v2) => %case v1 of { %conalt Main.Do(v3, v4) => <Main.{run:0} underapp 1>(v3, v4, v2)| %conalt Main.Seq(v5, v6) => %let v10 = (%let v7 = ({csegen:6}()) in (%let v8 = ({csegen:9}()) in (%let v9 = (<Main.{run:1} underapp 3>()) in (%con Prelude.Interfaces.MkMonad(v7, v8, v9))))) in (%let v11 = (<Main.{run:2} underapp 1>(v6, v2)) in (Prelude.Interfaces.>>(v10, v5, v11))) Nothing }| %conalt Main.Dry() => %let v12 = ({csegen:16}()) in (%let v13 = ("Out of fuel") in (Prelude.IO.putStrLn(v12, v13))) Nothing }
Main.{run:2} = [0, 1, 2]: %let v3 = (v1 @ ([__])) in (%let v4 = (v0 @ ([__])) in (Main.run(v3, v4)))
Main.{run:1} = [2, 1, 0]: %let v3 = (v1 @ (v0)) in (v3 @ (v0))
Main.{run:0} = [0, 1, 2, 3]: %let v4 = (v0 @ (v3)) in (%let v8 = (%let v6 = (v2 @ ([__])) in (%let v7 = (%let v5 = (v1 @ (v4)) in (v5 @ ([__]))) in (Main.run(v6, v7)))) in (v8 @ (v3)))
Main.main = []: %let v2 = (%let v0 = (10) in (Main.tank(v0))) in (%let v3 = (%let v1 = ("vroom") in (Main.loopPrint(v1))) in (Main.run(v2, v3)))
Main.loopPrint = [0]: %let v2 = (%let v1 = ({csegen:16}()) in (Prelude.IO.putStrLn(v1, v0))) in (%let v3 = (<Main.{loopPrint:0} underapp 1>(v0)) in (Main.>>(v2, v3)))
Main.{loopPrint:0} = [0, 1]: Main.loopPrint(v0)
Main.Seq = Constructor tag Just 1 arity 2 newtype by Nothing
Main.More = Constructor tag Just 1 arity 1 newtype by Nothing
Main.Dry = Constructor tag Just 0 arity 0 newtype by Nothing
Main.>> = [0, 1]: %con Main.Seq(v0, v1)
Builtin.believe_me = [0]: %op believe_me([__], [__], v0)
Prelude.Types.prim__integerToNat = [0]: %let v3 = (%let v2 = (%let v1 = (0) in (%op <=Integer(v1, v0))) in (%case v2 of { %constalt(0) => 0 Just 1 })) in (%case v3 of { %constalt(1) => Builtin.believe_me(v0)| %constalt(0) => 0 Nothing })
Prelude.Interfaces.MkMonad = Constructor tag Just 0 arity 3 newtype by Nothing
Prelude.Interfaces.MkApplicative = Constructor tag Just 0 arity 3 newtype by Nothing
Prelude.Interfaces.>> = [0, 1, 2]: %case v0 of { %conalt Prelude.Interfaces.MkMonad(v3, v4, v5) => %let v8 = (%let v7 = (%let v6 = (v4 @ ([__])) in (v6 @ ([__]))) in (v7 @ (v1))) in (%let v9 = (<Prelude.Interfaces.{>>:0} underapp 1>(v2)) in (v8 @ (v9))) Nothing }
Prelude.Interfaces.{>>:0} = [0, 1]: v0 @ ([__])
Prelude.IO.map = [0, 1, 2]: %let v3 = (v1 @ (v2)) in (v0 @ (v3))
Prelude.IO.putStrLn = [0, 1]: %let v3 = (%let v2 = ("\n") in (%op ++(v1, v2))) in (Prelude.IO.putStr(v0, v3))
Prelude.IO.putStr = [0, 1]: %case v0 of { %conalt Prelude.IO.MkHasIO(v2, v3) => %let v4 = (v3 @ ([__])) in (%let v5 = (<Prelude.IO.{putStr:0} underapp 1>(v1)) in (v4 @ (v5))) Nothing }
Prelude.IO.{putStr:0} = [0, 1]: Prelude.IO.prim__putStr(v0, v1)
Prelude.IO.prim__putStr = Foreign call ["C:idris2_putStr, libidris2_support, idris_support.h", "node:lambda:x=>process.stdout.write(x)", "browser:lambda:x=>console.log(x)"] [String, %World] -> IORes Unit
Prelude.IO.MkHasIO = Constructor tag Just 0 arity 2 newtype by Nothing
PrimIO.unsafePerformIO = [0]: %let v1 = (<PrimIO.{unsafePerformIO:0} underapp 1>(v0)) in (PrimIO.unsafeCreateWorld(v1))
PrimIO.{unsafePerformIO:0} = [0, 1]: v0 @ (v1)
PrimIO.unsafeCreateWorld = [0]: %let v1 = (%MkWorld) in (v0 @ (v1))
